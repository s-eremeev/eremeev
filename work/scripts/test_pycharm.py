# BigTestingDotNew @DoctorApBot —Å —Å–∏–Ω–∏–º —Ü–≤–µ—Ç–æ—á–∫–æ–º
import pandas as pd
import numpy as np
import os
import sqlite3
import telebot
from telebot import types
from requests.exceptions import ConnectionError

from yandexgptlite import YandexGPTLite
account = YandexGPTLite('b1g40ih9vkcl3ce44hob', 'y0_AgAAAABDOmatAATuwQAAAAEM6u7IAAA3BzDC5OJHoImEL0vYxPon0E1tfQ')


def simply(text):
    lst = text.split("\n\n")[0].split(",")
    lst_a = []
    for element in lst:
        element = "".join(
            x for x in element if x.isalnum() or x in [" ", "‚Äì", "-", "."]
        )
        element = (
            element.replace("–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", "")
            .replace("–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", "")
            .replace("–í —ç—Ç–æ–º —Ç–µ–∫—Å—Ç–µ", "")
            .replace("–í —Ç–µ–∫—Å—Ç–µ", "")
            .replace("–≤ —ç—Ç–æ–º —Ç–µ–∫—Å—Ç–µ", "")
            .replace("–≤ —Ç–µ–∫—Å—Ç–µ", "")
            .replace("–º–æ–∂–Ω–æ –≤—ã–¥–µ–ª–∏—Ç—å", "")
            .replace("—Å–ª–µ–¥—É—é—â–∏–µ", "")
            .replace("–∏–∑ —Ç–µ–∫—Å—Ç–∞", "")
        )
        lst_a.append(element)
    return ", ".join(lst_a)


def y_gpt(message):
    text = account.create_completion(
        f'–í—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞: "{message}?"',
        "1",
        system_prompt="–æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ",
    )
    simply_text = simply(text)
    text_2 = account.create_completion(
        f'–í—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞: "{simply_text}"',
        "1",
        system_prompt="–æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ",
    )
    # text_2
    return simply_text, simply(text_2)


# –¢–æ–∫–µ–Ω
TOKEN = "7213028141:AAGztt3IBI8wDipz_gmXmbNhVagpnDqfwzU"  # token BigTestingDotNew
# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)


# –º–µ–Ω—é (–º–µ–Ω—é)
@bot.message_handler(commands=["start"])
def start(message):
    """–º–µ–Ω—é –±–æ—Ç–∞"""
    try:
        # bot.delete_message(message.chat.id, message.message_id)
        bot.send_message(
            message.chat.id,
            text=f"""
            –ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ, *{message.from_user.first_name}!*
    üìñ–≠—Ç–æ—Ç —á–∞—Ç-–±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å *Yandex_GPT*""",
            parse_mode="Markdown",
        )
    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"""üö´–û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}
        ‚ùóÔ∏è–û—á–∏—Å—Ç–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—é, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏""",
        )


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ –º–µ–Ω—é)
@bot.message_handler(content_types=["text"])
def handle_message(message):
    """–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    aswer_ygpt_1, aswer_ygpt_2 = y_gpt(message.text)
    bot.send_message(
        message.chat.id,
        f"*Yandex GPT —Å–ø–µ—Ä–∞–≤–∞ —Å–∫–∞–∑–∞–ª*: {aswer_ygpt_1}, *–∞ –∑–∞—Å–∏–º –¥–æ–±–∞–≤–∏–ª*: {aswer_ygpt_2}",
        parse_mode="Markdown",
    )


# –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.infinity_polling()